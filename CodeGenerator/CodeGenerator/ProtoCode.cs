using System;
using System.IO;
using System.Text;
using System.Reflection;
using ProtocolBuffers;
using System.Collections.Generic;

namespace ProtocolBuffers
{
    static class ProtoCode
    {
        /// <summary>
        /// Generate code for reading and writing protocol buffer messages
        /// </summary>
        public static void Save(ProtoCollection file, string csPath)
        {
            string ext = Path.GetExtension(csPath);
            string prefix = csPath.Substring(0, csPath.Length - ext.Length);

            string csDir = Path.GetDirectoryName(csPath);
            if (Directory.Exists(csDir) == false)
                Directory.CreateDirectory(csDir);

            //Basic structures
            using (CodeWriter cw = new CodeWriter(csPath))
            {
                cw.Comment(@"
You may customize this code as you like
Report bugs to: https://silentorbit.com/protobuf/

Generated by ProtocolBuffer
 - a pure c# code generation implementation of protocol buffers
"
                );
                cw.WriteLine("using System;");
                cw.WriteLine("using System.Collections.Generic;");
                cw.WriteLine();

                foreach (ProtoMessage m in file.Messages.Values)
                {
                    cw.Bracket("namespace " + m.CsNamespace);
                    MessageCode.GenerateClass(m, cw);
                    cw.EndBracket();
                }

                foreach (ProtoEnum e in file.Enums.Values)
                {
                    cw.Bracket("namespace " + e.CsNamespace);
                    MessageCode.GenerateEnum(e, cw);
                    cw.EndBracket();
                }
            }
            
            //.Serializer.cs
            //Code for Reading/Writing 
            using (CodeWriter cw = new CodeWriter(prefix + ".Serializer" + ext))
            {
                cw.Comment(@"
This is the backend code for reading and writing
Report bugs to: https://silentorbit.com/protobuf/

Generated by ProtocolBuffer
 - a pure c# code generation implementation of protocol buffers
"
                );
                cw.WriteLine("using System;");
                cw.WriteLine("using System.IO;");
                cw.WriteLine("using System.Text;");
                cw.WriteLine("using System.Collections.Generic;");
                cw.WriteLine("using ProtocolBuffers;");
                cw.WriteLine();

                foreach (ProtoMessage m in file.Messages.Values)
                {
                    cw.Bracket("namespace " + m.CsNamespace);
                    MessageSerializer.GenerateClassSerializer(m, cw);
                    cw.EndBracket();
                }
            }
                
            string libPath = Path.Combine(Path.GetDirectoryName(csPath), "ProtocolParser.cs");
            using (TextWriter codeWriter = new StreamWriter(libPath, false, Encoding.UTF8))
            {
                ReadCode(codeWriter, "ProtocolParser", true);
                ReadCode(codeWriter, "ProtocolParserFixed", false);
                ReadCode(codeWriter, "ProtocolParserKey", false);
                ReadCode(codeWriter, "ProtocolParserVarInt", false);
            }
        }
        
        /// <summary>
        /// Read c# code from sourcePath and write it on code without the initial using statements.
        /// </summary>
        private static void ReadCode(TextWriter code, string name, bool includeUsing)
        {
            code.WriteLine("#region " + name);
            
            using (TextReader tr = new StreamReader(Assembly.GetExecutingAssembly ().GetManifestResourceStream (name), Encoding.UTF8))
            {
                while (true)
                {
                    string line = tr.ReadLine();
                    if (line == null)
                        break;
                    if (includeUsing == false && line.StartsWith("using"))
                        continue;
                    
                    code.WriteLine(line);
                }
            }
            code.WriteLine("#endregion");
        }
        
    }
}

