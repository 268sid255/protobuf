// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ProtocolBuffers;

namespace Personal
{
    public partial class Person
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Person Deserialize(Stream stream)
        {
            Person instance = new Person();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Person DeserializeLengthDelimited(Stream stream)
        {
            Person instance = new Person();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Person Deserialize(byte[] buffer)
        {
            Person instance = new Person();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Personal.Person Deserialize(byte[] buffer, Personal.Person instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Personal.Person Deserialize(Stream stream, Personal.Person instance)
        {
            if (instance.Phone == null)
                instance.Phone = new List<Personal.Person.PhoneNumber>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Name = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Id = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    instance.Email = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    // repeated
                    instance.Phone.Add(Personal.Person.PhoneNumber.DeserializeLengthDelimited(stream));
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Personal.Person DeserializeLengthDelimited(Stream stream, Personal.Person instance)
        {
            if (instance.Phone == null)
                instance.Phone = new List<Personal.Person.PhoneNumber>();
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Name = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Id = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    instance.Email = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    // repeated
                    instance.Phone.Add(Personal.Person.PhoneNumber.DeserializeLengthDelimited(stream));
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Person instance)
        {
            if (instance.Name == null)
                throw new ArgumentNullException("Name", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
            // Key for field: 2, Varint
            stream.WriteByte(16);
            ProtocolParser.WriteUInt32(stream,(uint)instance.Id);
            if (instance.Email != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Email));
            }
            if (instance.Phone != null)
            {
                foreach (var i4 in instance.Phone)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    ﻿using (MemoryStream ms4 = new MemoryStream())
                    {
                        Personal.Person.PhoneNumber.Serialize(ms4, i4);
                        // Length delimited byte array
                        uint ms4Length = (uint)ms4.Length;
                        ProtocolParser.WriteUInt32(stream, ms4Length);
                        stream.Write(ms4.GetBuffer(), 0, (int)ms4Length);
                    }
                    
                }
            }
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Person instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        public partial class PhoneNumber
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PhoneNumber Deserialize(Stream stream)
            {
                PhoneNumber instance = new PhoneNumber();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PhoneNumber DeserializeLengthDelimited(Stream stream)
            {
                PhoneNumber instance = new PhoneNumber();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static PhoneNumber Deserialize(byte[] buffer)
            {
                PhoneNumber instance = new PhoneNumber();
                using (MemoryStream ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Personal.Person.PhoneNumber Deserialize(byte[] buffer, Personal.Person.PhoneNumber instance)
            {
                using (MemoryStream ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Personal.Person.PhoneNumber Deserialize(Stream stream, Personal.Person.PhoneNumber instance)
            {
                instance.Type = Personal.Person.PhoneType.HOME;
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                    case 10:
                        instance.Number = ProtocolParser.ReadString(stream);
                        continue;
                        // Field 2 Varint
                    case 16:
                        instance.Type = (Personal.Person.PhoneType)ProtocolParser.ReadUInt32(stream);
                        continue;
                    }

                    ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                    case 0:
                        throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        ProtocolParser.SkipKey(stream, key);
                        break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Personal.Person.PhoneNumber DeserializeLengthDelimited(Stream stream, Personal.Person.PhoneNumber instance)
            {
                instance.Type = Personal.Person.PhoneType.HOME;
                long limit = ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if(stream.Position == limit)
                            break;
                        else
                            throw new InvalidOperationException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                    case 10:
                        instance.Number = ProtocolParser.ReadString(stream);
                        continue;
                        // Field 2 Varint
                    case 16:
                        instance.Type = (Personal.Person.PhoneType)ProtocolParser.ReadUInt32(stream);
                        continue;
                    }

                    ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                    case 0:
                        throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        ProtocolParser.SkipKey(stream, key);
                        break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, PhoneNumber instance)
            {
                if (instance.Number == null)
                    throw new ArgumentNullException("Number", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Number));
                if (instance.Type != PhoneType.HOME)
                {
                    // Key for field: 2, Varint
                    stream.WriteByte(16);
                    ProtocolParser.WriteUInt32(stream,(uint)instance.Type);
                }
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(PhoneNumber instance)
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
        }

    }

}
namespace Personal
{
    public partial class AddressBook
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AddressBook Deserialize(Stream stream)
        {
            AddressBook instance = new AddressBook();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AddressBook DeserializeLengthDelimited(Stream stream)
        {
            AddressBook instance = new AddressBook();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static AddressBook Deserialize(byte[] buffer)
        {
            AddressBook instance = new AddressBook();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Personal.AddressBook Deserialize(byte[] buffer, Personal.AddressBook instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Personal.AddressBook Deserialize(Stream stream, Personal.AddressBook instance)
        {
            if (instance.List == null)
                instance.List = new List<Personal.Person>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.List.Add(Personal.Person.DeserializeLengthDelimited(stream));
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Personal.AddressBook DeserializeLengthDelimited(Stream stream, Personal.AddressBook instance)
        {
            if (instance.List == null)
                instance.List = new List<Personal.Person>();
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.List.Add(Personal.Person.DeserializeLengthDelimited(stream));
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, AddressBook instance)
        {
            if (instance.List != null)
            {
                foreach (var i1 in instance.List)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿using (MemoryStream ms1 = new MemoryStream())
                    {
                        Personal.Person.Serialize(ms1, i1);
                        // Length delimited byte array
                        uint ms1Length = (uint)ms1.Length;
                        ProtocolParser.WriteUInt32(stream, ms1Length);
                        stream.Write(ms1.GetBuffer(), 0, (int)ms1Length);
                    }
                    
                }
            }
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(AddressBook instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace Local
{
    internal partial class LocalFeatures
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        internal static LocalFeatures Deserialize(Stream stream)
        {
            LocalFeatures instance = new LocalFeatures();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        internal static LocalFeatures DeserializeLengthDelimited(Stream stream)
        {
            LocalFeatures instance = new LocalFeatures();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        internal static LocalFeatures Deserialize(byte[] buffer)
        {
            LocalFeatures instance = new LocalFeatures();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        internal static Local.LocalFeatures Deserialize(byte[] buffer, Local.LocalFeatures instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        internal static Local.LocalFeatures Deserialize(Stream stream, Local.LocalFeatures instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.MyEnum = LocalFeatureTest.TopEnum.First;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Uptime = new TimeSpan((long)ProtocolParser.ReadUInt64(stream));
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.DueDate = new DateTime((long)ProtocolParser.ReadUInt64(stream));
                    continue;
                    // Field 3 Fixed64
                case 25:
                    instance.Amount = br.ReadDouble();
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    instance.Denial = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 5 LengthDelimited
                case 42:
                    instance.Secret = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 6 LengthDelimited
                case 50:
                    instance.Internal = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 7 LengthDelimited
                case 58:
                    instance.PR = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    Mine.MyMessageV1.DeserializeLengthDelimited(stream, instance.TestingReadOnly);
                    continue;
                    // Field 9 LengthDelimited
                case 74:
                    if (instance.MyInterface == null)
                        throw new InvalidOperationException("Can't deserialize into a interfaces null pointer");
                    else
                        LocalFeatureTest.InterfaceTestSerializer.DeserializeLengthDelimited(stream, instance.MyInterface);
                    continue;
                    // Field 10 LengthDelimited
                case 82:
                    LocalFeatureTest.StructTest.DeserializeLengthDelimited(stream, ref instance.MyStruct);
                    continue;
                    // Field 11 LengthDelimited
                case 90:
                    TestB.ExternalStructSerializer.DeserializeLengthDelimited(stream, ref instance.MyExtStruct);
                    continue;
                    // Field 12 LengthDelimited
                case 98:
                    if (instance.MyExtClass == null)
                        instance.MyExtClass = TestB.ExternalClassSerializer.DeserializeLengthDelimited(stream);
                    else
                        TestB.ExternalClassSerializer.DeserializeLengthDelimited(stream, instance.MyExtClass);
                    continue;
                    // Field 13 Varint
                case 104:
                    instance.MyEnum = (LocalFeatureTest.TopEnum)ProtocolParser.ReadUInt32(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            instance.AfterDeserialize();
            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        internal static Local.LocalFeatures DeserializeLengthDelimited(Stream stream, Local.LocalFeatures instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.MyEnum = LocalFeatureTest.TopEnum.First;
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Uptime = new TimeSpan((long)ProtocolParser.ReadUInt64(stream));
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.DueDate = new DateTime((long)ProtocolParser.ReadUInt64(stream));
                    continue;
                    // Field 3 Fixed64
                case 25:
                    instance.Amount = br.ReadDouble();
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    instance.Denial = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 5 LengthDelimited
                case 42:
                    instance.Secret = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 6 LengthDelimited
                case 50:
                    instance.Internal = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 7 LengthDelimited
                case 58:
                    instance.PR = ProtocolParser.ReadString(stream);
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    Mine.MyMessageV1.DeserializeLengthDelimited(stream, instance.TestingReadOnly);
                    continue;
                    // Field 9 LengthDelimited
                case 74:
                    if (instance.MyInterface == null)
                        throw new InvalidOperationException("Can't deserialize into a interfaces null pointer");
                    else
                        LocalFeatureTest.InterfaceTestSerializer.DeserializeLengthDelimited(stream, instance.MyInterface);
                    continue;
                    // Field 10 LengthDelimited
                case 82:
                    LocalFeatureTest.StructTest.DeserializeLengthDelimited(stream, ref instance.MyStruct);
                    continue;
                    // Field 11 LengthDelimited
                case 90:
                    TestB.ExternalStructSerializer.DeserializeLengthDelimited(stream, ref instance.MyExtStruct);
                    continue;
                    // Field 12 LengthDelimited
                case 98:
                    if (instance.MyExtClass == null)
                        instance.MyExtClass = TestB.ExternalClassSerializer.DeserializeLengthDelimited(stream);
                    else
                        TestB.ExternalClassSerializer.DeserializeLengthDelimited(stream, instance.MyExtClass);
                    continue;
                    // Field 13 Varint
                case 104:
                    instance.MyEnum = (LocalFeatureTest.TopEnum)ProtocolParser.ReadUInt32(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            instance.AfterDeserialize();
            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        internal static void Serialize(Stream stream, LocalFeatures instance)
        {
            instance.BeforeSerialize();

            BinaryWriter bw = new BinaryWriter(stream);
            // Key for field: 1, Varint
            stream.WriteByte(8);
            ProtocolParser.WriteUInt64(stream,(ulong)instance.Uptime.Ticks);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            ProtocolParser.WriteUInt64(stream,(ulong)instance.DueDate.Ticks);
            // Key for field: 3, Fixed64
            stream.WriteByte(25);
            bw.Write(instance.Amount);
            if (instance.Denial != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Denial));
            }
            if (instance.Secret != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Secret));
            }
            if (instance.Internal != null)
            {
                // Key for field: 6, LengthDelimited
                stream.WriteByte(50);
                ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Internal));
            }
            if (instance.PR != null)
            {
                // Key for field: 7, LengthDelimited
                stream.WriteByte(58);
                ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.PR));
            }
            if (instance.TestingReadOnly != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                ﻿using (MemoryStream ms8 = new MemoryStream())
                {
                    Mine.MyMessageV1.Serialize(ms8, instance.TestingReadOnly);
                    // Length delimited byte array
                    uint ms8Length = (uint)ms8.Length;
                    ProtocolParser.WriteUInt32(stream, ms8Length);
                    stream.Write(ms8.GetBuffer(), 0, (int)ms8Length);
                }
                
            }
            if (instance.MyInterface == null)
                throw new ArgumentNullException("MyInterface", "Required by proto specification.");
            // Key for field: 9, LengthDelimited
            stream.WriteByte(74);
            ﻿using (MemoryStream ms9 = new MemoryStream())
            {
                LocalFeatureTest.InterfaceTestSerializer.Serialize(ms9, instance.MyInterface);
                // Length delimited byte array
                uint ms9Length = (uint)ms9.Length;
                ProtocolParser.WriteUInt32(stream, ms9Length);
                stream.Write(ms9.GetBuffer(), 0, (int)ms9Length);
            }
            
            // Key for field: 10, LengthDelimited
            stream.WriteByte(82);
            ﻿using (MemoryStream ms10 = new MemoryStream())
            {
                LocalFeatureTest.StructTest.Serialize(ms10, instance.MyStruct);
                // Length delimited byte array
                uint ms10Length = (uint)ms10.Length;
                ProtocolParser.WriteUInt32(stream, ms10Length);
                stream.Write(ms10.GetBuffer(), 0, (int)ms10Length);
            }
            
            // Key for field: 11, LengthDelimited
            stream.WriteByte(90);
            ﻿using (MemoryStream ms11 = new MemoryStream())
            {
                TestB.ExternalStructSerializer.Serialize(ms11, instance.MyExtStruct);
                // Length delimited byte array
                uint ms11Length = (uint)ms11.Length;
                ProtocolParser.WriteUInt32(stream, ms11Length);
                stream.Write(ms11.GetBuffer(), 0, (int)ms11Length);
            }
            
            if (instance.MyExtClass != null)
            {
                // Key for field: 12, LengthDelimited
                stream.WriteByte(98);
                ﻿using (MemoryStream ms12 = new MemoryStream())
                {
                    TestB.ExternalClassSerializer.Serialize(ms12, instance.MyExtClass);
                    // Length delimited byte array
                    uint ms12Length = (uint)ms12.Length;
                    ProtocolParser.WriteUInt32(stream, ms12Length);
                    stream.Write(ms12.GetBuffer(), 0, (int)ms12Length);
                }
                
            }
            // Key for field: 13, Varint
            stream.WriteByte(104);
            ProtocolParser.WriteUInt32(stream,(uint)instance.MyEnum);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        internal static byte[] SerializeToBytes(LocalFeatures instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace LocalFeatureTest
{
    public static class InterfaceTestSerializer
    {
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static LocalFeatureTest.InterfaceTest Deserialize(byte[] buffer, LocalFeatureTest.InterfaceTest instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static LocalFeatureTest.InterfaceTest Deserialize(Stream stream, LocalFeatureTest.InterfaceTest instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static LocalFeatureTest.InterfaceTest DeserializeLengthDelimited(Stream stream, LocalFeatureTest.InterfaceTest instance)
        {
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, InterfaceTest instance)
        {
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(InterfaceTest instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace LocalFeatureTest
{
    public partial struct StructTest
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static StructTest Deserialize(Stream stream)
        {
            StructTest instance = new StructTest();
            Deserialize(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static StructTest DeserializeLengthDelimited(Stream stream)
        {
            StructTest instance = new StructTest();
            DeserializeLengthDelimited(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static StructTest Deserialize(byte[] buffer)
        {
            StructTest instance = new StructTest();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static LocalFeatureTest.StructTest Deserialize(byte[] buffer, ref LocalFeatureTest.StructTest instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static LocalFeatureTest.StructTest Deserialize(Stream stream, ref LocalFeatureTest.StructTest instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static LocalFeatureTest.StructTest DeserializeLengthDelimited(Stream stream, ref LocalFeatureTest.StructTest instance)
        {
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, StructTest instance)
        {
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(StructTest instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace TestB
{
    public static class ExternalStructSerializer
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ExternalStruct Deserialize(Stream stream)
        {
            ExternalStruct instance = new ExternalStruct();
            Deserialize(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ExternalStruct DeserializeLengthDelimited(Stream stream)
        {
            ExternalStruct instance = new ExternalStruct();
            DeserializeLengthDelimited(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ExternalStruct Deserialize(byte[] buffer)
        {
            ExternalStruct instance = new ExternalStruct();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TestB.ExternalStruct Deserialize(byte[] buffer, ref TestB.ExternalStruct instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TestB.ExternalStruct Deserialize(Stream stream, ref TestB.ExternalStruct instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed64
                case 9:
                    instance.X = br.ReadDouble();
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TestB.ExternalStruct DeserializeLengthDelimited(Stream stream, ref TestB.ExternalStruct instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed64
                case 9:
                    instance.X = br.ReadDouble();
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ExternalStruct instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            // Key for field: 1, Fixed64
            stream.WriteByte(9);
            bw.Write(instance.X);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ExternalStruct instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace TestB
{
    public static class ExternalClassSerializer
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ExternalClass Deserialize(Stream stream)
        {
            ExternalClass instance = new ExternalClass();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ExternalClass DeserializeLengthDelimited(Stream stream)
        {
            ExternalClass instance = new ExternalClass();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ExternalClass Deserialize(byte[] buffer)
        {
            ExternalClass instance = new ExternalClass();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TestB.ExternalClass Deserialize(byte[] buffer, TestB.ExternalClass instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TestB.ExternalClass Deserialize(Stream stream, TestB.ExternalClass instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.A = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TestB.ExternalClass DeserializeLengthDelimited(Stream stream, TestB.ExternalClass instance)
        {
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.A = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ExternalClass instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            ProtocolParser.WriteUInt32(stream,(uint)instance.A);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ExternalClass instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace Mine
{
    public partial class MyMessageV1
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MyMessageV1 Deserialize(Stream stream)
        {
            MyMessageV1 instance = new MyMessageV1();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MyMessageV1 DeserializeLengthDelimited(Stream stream)
        {
            MyMessageV1 instance = new MyMessageV1();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MyMessageV1 Deserialize(byte[] buffer)
        {
            MyMessageV1 instance = new MyMessageV1();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Mine.MyMessageV1 Deserialize(byte[] buffer, Mine.MyMessageV1 instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Mine.MyMessageV1 Deserialize(Stream stream, Mine.MyMessageV1 instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    if (instance.PreservedFields == null)
                        instance.PreservedFields = new List<KeyValue>();
                    instance.PreservedFields.Add(new KeyValue(key, ProtocolParser.ReadValueBytes(stream, key)));
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Mine.MyMessageV1 DeserializeLengthDelimited(Stream stream, Mine.MyMessageV1 instance)
        {
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    if (instance.PreservedFields == null)
                        instance.PreservedFields = new List<KeyValue>();
                    instance.PreservedFields.Add(new KeyValue(key, ProtocolParser.ReadValueBytes(stream, key)));
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MyMessageV1 instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldA);
            if (instance.PreservedFields != null)
            {
                foreach (KeyValue kv in instance.PreservedFields)
                {
                    ProtocolParser.WriteKey(stream, kv.Key);
                    stream.Write(kv.Value, 0, kv.Value.Length);
                }
            }
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MyMessageV1 instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace Yours
{
    public partial class MyMessageV2
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MyMessageV2 Deserialize(Stream stream)
        {
            MyMessageV2 instance = new MyMessageV2();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MyMessageV2 DeserializeLengthDelimited(Stream stream)
        {
            MyMessageV2 instance = new MyMessageV2();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MyMessageV2 Deserialize(byte[] buffer)
        {
            MyMessageV2 instance = new MyMessageV2();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Yours.MyMessageV2 Deserialize(byte[] buffer, Yours.MyMessageV2 instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Yours.MyMessageV2 Deserialize(Stream stream, Yours.MyMessageV2 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.FieldR = Yours.MyMessageV2.MyEnum.ETest2;
            if (instance.FieldT == null)
                instance.FieldT = new List<uint>();
            if (instance.FieldS == null)
                instance.FieldS = new List<uint>();
            if (instance.FieldV == null)
                instance.FieldV = new List<Theirs.TheirMessage>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 2 Fixed64
                case 17:
                    instance.FieldB = br.ReadDouble();
                    continue;
                    // Field 3 Fixed32
                case 29:
                    instance.FieldC = br.ReadSingle();
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.FieldD = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.FieldE = (long)ProtocolParser.ReadUInt64(stream);
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.FieldF = ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.FieldG = ProtocolParser.ReadUInt64(stream);
                    continue;
                    // Field 8 Varint
                case 64:
                    instance.FieldH = ProtocolParser.ReadSInt32(stream);
                    continue;
                    // Field 9 Varint
                case 72:
                    instance.FieldI = ProtocolParser.ReadSInt64(stream);
                    continue;
                    // Field 10 Fixed32
                case 85:
                    instance.FieldJ = br.ReadUInt32();
                    continue;
                    // Field 11 Fixed64
                case 89:
                    instance.FieldK = br.ReadUInt64();
                    continue;
                    // Field 12 Fixed32
                case 101:
                    instance.FieldL = br.ReadInt32();
                    continue;
                    // Field 13 Fixed64
                case 105:
                    instance.FieldM = br.ReadInt64();
                    continue;
                    // Field 14 Varint
                case 112:
                    instance.FieldN = ProtocolParser.ReadBool(stream);
                    continue;
                    // Field 15 LengthDelimited
                case 122:
                    instance.FieldO = ProtocolParser.ReadString(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    instance.FieldP = ProtocolParser.ReadBytes(stream);
                    continue;
                case 17:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldQ = (Yours.MyMessageV2.MyEnum)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 18:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldR = (Yours.MyMessageV2.MyEnum)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 19:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    instance.Dummy = ProtocolParser.ReadString(stream);
                    continue;
                case 20:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated packed
                    using (MemoryStream ms20 = new MemoryStream(ProtocolParser.ReadBytes(stream)))
                    {
                        BinaryReader br20 = new BinaryReader(ms20);
                        while (ms20.Position < ms20.Length)
                        {
                            instance.FieldT.Add(br20.ReadUInt32());
                        }
                    }
                    continue;
                case 21:
                    if(key.WireType != Wire.Varint)
                        break;
                    // repeated
                    instance.FieldS.Add(ProtocolParser.ReadUInt32(stream));
                    continue;
                case 22:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    if (instance.FieldU == null)
                        instance.FieldU = Theirs.TheirMessage.DeserializeLengthDelimited(stream);
                    else
                        Theirs.TheirMessage.DeserializeLengthDelimited(stream, instance.FieldU);
                    continue;
                case 23:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated
                    instance.FieldV.Add(Theirs.TheirMessage.DeserializeLengthDelimited(stream));
                    continue;
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Yours.MyMessageV2 DeserializeLengthDelimited(Stream stream, Yours.MyMessageV2 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.FieldR = Yours.MyMessageV2.MyEnum.ETest2;
            if (instance.FieldT == null)
                instance.FieldT = new List<uint>();
            if (instance.FieldS == null)
                instance.FieldS = new List<uint>();
            if (instance.FieldV == null)
                instance.FieldV = new List<Theirs.TheirMessage>();
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 2 Fixed64
                case 17:
                    instance.FieldB = br.ReadDouble();
                    continue;
                    // Field 3 Fixed32
                case 29:
                    instance.FieldC = br.ReadSingle();
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.FieldD = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.FieldE = (long)ProtocolParser.ReadUInt64(stream);
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.FieldF = ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.FieldG = ProtocolParser.ReadUInt64(stream);
                    continue;
                    // Field 8 Varint
                case 64:
                    instance.FieldH = ProtocolParser.ReadSInt32(stream);
                    continue;
                    // Field 9 Varint
                case 72:
                    instance.FieldI = ProtocolParser.ReadSInt64(stream);
                    continue;
                    // Field 10 Fixed32
                case 85:
                    instance.FieldJ = br.ReadUInt32();
                    continue;
                    // Field 11 Fixed64
                case 89:
                    instance.FieldK = br.ReadUInt64();
                    continue;
                    // Field 12 Fixed32
                case 101:
                    instance.FieldL = br.ReadInt32();
                    continue;
                    // Field 13 Fixed64
                case 105:
                    instance.FieldM = br.ReadInt64();
                    continue;
                    // Field 14 Varint
                case 112:
                    instance.FieldN = ProtocolParser.ReadBool(stream);
                    continue;
                    // Field 15 LengthDelimited
                case 122:
                    instance.FieldO = ProtocolParser.ReadString(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    instance.FieldP = ProtocolParser.ReadBytes(stream);
                    continue;
                case 17:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldQ = (Yours.MyMessageV2.MyEnum)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 18:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldR = (Yours.MyMessageV2.MyEnum)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 19:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    instance.Dummy = ProtocolParser.ReadString(stream);
                    continue;
                case 20:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated packed
                    using (MemoryStream ms20 = new MemoryStream(ProtocolParser.ReadBytes(stream)))
                    {
                        BinaryReader br20 = new BinaryReader(ms20);
                        while (ms20.Position < ms20.Length)
                        {
                            instance.FieldT.Add(br20.ReadUInt32());
                        }
                    }
                    continue;
                case 21:
                    if(key.WireType != Wire.Varint)
                        break;
                    // repeated
                    instance.FieldS.Add(ProtocolParser.ReadUInt32(stream));
                    continue;
                case 22:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    if (instance.FieldU == null)
                        instance.FieldU = Theirs.TheirMessage.DeserializeLengthDelimited(stream);
                    else
                        Theirs.TheirMessage.DeserializeLengthDelimited(stream, instance.FieldU);
                    continue;
                case 23:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated
                    instance.FieldV.Add(Theirs.TheirMessage.DeserializeLengthDelimited(stream));
                    continue;
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MyMessageV2 instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            // Key for field: 1, Varint
            stream.WriteByte(8);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldA);
            // Key for field: 2, Fixed64
            stream.WriteByte(17);
            bw.Write(instance.FieldB);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.FieldC);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldD);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            ProtocolParser.WriteUInt64(stream,(ulong)instance.FieldE);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            ProtocolParser.WriteUInt32(stream, instance.FieldF);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            ProtocolParser.WriteUInt64(stream, instance.FieldG);
            // Key for field: 8, Varint
            stream.WriteByte(64);
            ProtocolParser.WriteSInt32(stream, instance.FieldH);
            // Key for field: 9, Varint
            stream.WriteByte(72);
            ProtocolParser.WriteSInt64(stream, instance.FieldI);
            // Key for field: 10, Fixed32
            stream.WriteByte(85);
            bw.Write(instance.FieldJ);
            // Key for field: 11, Fixed64
            stream.WriteByte(89);
            bw.Write(instance.FieldK);
            // Key for field: 12, Fixed32
            stream.WriteByte(101);
            bw.Write(instance.FieldL);
            // Key for field: 13, Fixed64
            stream.WriteByte(105);
            bw.Write(instance.FieldM);
            // Key for field: 14, Varint
            stream.WriteByte(112);
            ProtocolParser.WriteBool(stream, instance.FieldN);
            if (instance.FieldO == null)
                throw new ArgumentNullException("FieldO", "Required by proto specification.");
            // Key for field: 15, LengthDelimited
            stream.WriteByte(122);
            ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.FieldO));
            if (instance.FieldP == null)
                throw new ArgumentNullException("FieldP", "Required by proto specification.");
            // Key for field: 16, LengthDelimited
            stream.Write(new byte[]{130, 1}, 0, 2);
            ProtocolParser.WriteBytes(stream, instance.FieldP);
            // Key for field: 17, Varint
            stream.Write(new byte[]{136, 1}, 0, 2);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldQ);
            if (instance.FieldR != MyEnum.ETest2)
            {
                // Key for field: 18, Varint
                stream.Write(new byte[]{144, 1}, 0, 2);
                ProtocolParser.WriteUInt32(stream,(uint)instance.FieldR);
            }
            if (instance.Dummy != null)
            {
                // Key for field: 19, LengthDelimited
                stream.Write(new byte[]{154, 1}, 0, 2);
                ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Dummy));
            }
            if (instance.FieldT != null)
            {
                // Key for field: 20, LengthDelimited
                stream.Write(new byte[]{162, 1}, 0, 2);
                ProtocolParser.WriteUInt32(stream, 4u * (uint)instance.FieldT.Count);
                foreach (var i20 in instance.FieldT)
                {
                    bw.Write(i20);
                }
            }
            if (instance.FieldS != null)
            {
                foreach (var i21 in instance.FieldS)
                {
                    // Key for field: 21, Varint
                    stream.Write(new byte[]{168, 1}, 0, 2);
                    ProtocolParser.WriteUInt32(stream, i21);
                }
            }
            if (instance.FieldU != null)
            {
                // Key for field: 22, LengthDelimited
                stream.Write(new byte[]{178, 1}, 0, 2);
                ﻿using (MemoryStream ms22 = new MemoryStream())
                {
                    Theirs.TheirMessage.Serialize(ms22, instance.FieldU);
                    // Length delimited byte array
                    uint ms22Length = (uint)ms22.Length;
                    ProtocolParser.WriteUInt32(stream, ms22Length);
                    stream.Write(ms22.GetBuffer(), 0, (int)ms22Length);
                }
                
            }
            if (instance.FieldV != null)
            {
                foreach (var i23 in instance.FieldV)
                {
                    // Key for field: 23, LengthDelimited
                    stream.Write(new byte[]{186, 1}, 0, 2);
                    ﻿using (MemoryStream ms23 = new MemoryStream())
                    {
                        Theirs.TheirMessage.Serialize(ms23, i23);
                        // Length delimited byte array
                        uint ms23Length = (uint)ms23.Length;
                        ProtocolParser.WriteUInt32(stream, ms23Length);
                        stream.Write(ms23.GetBuffer(), 0, (int)ms23Length);
                    }
                    
                }
            }
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MyMessageV2 instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace Theirs
{
    public partial class TheirMessage
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TheirMessage Deserialize(Stream stream)
        {
            TheirMessage instance = new TheirMessage();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TheirMessage DeserializeLengthDelimited(Stream stream)
        {
            TheirMessage instance = new TheirMessage();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static TheirMessage Deserialize(byte[] buffer)
        {
            TheirMessage instance = new TheirMessage();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Theirs.TheirMessage Deserialize(byte[] buffer, Theirs.TheirMessage instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Theirs.TheirMessage Deserialize(Stream stream, Theirs.TheirMessage instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Theirs.TheirMessage DeserializeLengthDelimited(Stream stream, Theirs.TheirMessage instance)
        {
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                }

                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, TheirMessage instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldA);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(TheirMessage instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
namespace Proto.test
{
    public partial class LongMessage
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static LongMessage Deserialize(Stream stream)
        {
            LongMessage instance = new LongMessage();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static LongMessage DeserializeLengthDelimited(Stream stream)
        {
            LongMessage instance = new LongMessage();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static LongMessage Deserialize(byte[] buffer)
        {
            LongMessage instance = new LongMessage();
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Proto.test.LongMessage Deserialize(byte[] buffer, Proto.test.LongMessage instance)
        {
            using (MemoryStream ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Proto.test.LongMessage Deserialize(Stream stream, Proto.test.LongMessage instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                case 32:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldX1 = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 64:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldX2 = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 96:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldX3 = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 100:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldX4 = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Proto.test.LongMessage DeserializeLengthDelimited(Stream stream, Proto.test.LongMessage instance)
        {
            long limit = ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                ProtocolBuffers.Key key = ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                case 32:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldX1 = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 64:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldX2 = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 96:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldX3 = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                case 100:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldX4 = (int)ProtocolParser.ReadUInt32(stream);
                    continue;
                default:
                    ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, LongMessage instance)
        {
            // Key for field: 32, Varint
            stream.Write(new byte[]{128, 2}, 0, 2);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldX1);
            // Key for field: 64, Varint
            stream.Write(new byte[]{128, 4}, 0, 2);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldX2);
            // Key for field: 96, Varint
            stream.Write(new byte[]{128, 6}, 0, 2);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldX3);
            // Key for field: 100, Varint
            stream.Write(new byte[]{160, 6}, 0, 2);
            ProtocolParser.WriteUInt32(stream,(uint)instance.FieldX4);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(LongMessage instance)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }

}
